
Lights.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000296  0000032a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000296  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800100  00800100  0000032a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000032a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  0000035a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000002bd  00000000  00000000  0000039a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000113  00000000  00000000  00000657  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000026a  00000000  00000000  0000076a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  000009d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000024f  00000000  00000000  00000a38  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000003a  00000000  00000000  00000c87  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00000cc1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	57 c0       	rjmp	.+174    	; 0xb0 <__ctors_end>
   2:	00 00       	nop
   4:	65 c0       	rjmp	.+202    	; 0xd0 <__bad_interrupt>
   6:	00 00       	nop
   8:	63 c0       	rjmp	.+198    	; 0xd0 <__bad_interrupt>
   a:	00 00       	nop
   c:	61 c0       	rjmp	.+194    	; 0xd0 <__bad_interrupt>
   e:	00 00       	nop
  10:	5f c0       	rjmp	.+190    	; 0xd0 <__bad_interrupt>
  12:	00 00       	nop
  14:	5d c0       	rjmp	.+186    	; 0xd0 <__bad_interrupt>
  16:	00 00       	nop
  18:	5b c0       	rjmp	.+182    	; 0xd0 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	59 c0       	rjmp	.+178    	; 0xd0 <__bad_interrupt>
  1e:	00 00       	nop
  20:	57 c0       	rjmp	.+174    	; 0xd0 <__bad_interrupt>
  22:	00 00       	nop
  24:	55 c0       	rjmp	.+170    	; 0xd0 <__bad_interrupt>
  26:	00 00       	nop
  28:	53 c0       	rjmp	.+166    	; 0xd0 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	51 c0       	rjmp	.+162    	; 0xd0 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4f c0       	rjmp	.+158    	; 0xd0 <__bad_interrupt>
  32:	00 00       	nop
  34:	4d c0       	rjmp	.+154    	; 0xd0 <__bad_interrupt>
  36:	00 00       	nop
  38:	4b c0       	rjmp	.+150    	; 0xd0 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	49 c0       	rjmp	.+146    	; 0xd0 <__bad_interrupt>
  3e:	00 00       	nop
  40:	47 c0       	rjmp	.+142    	; 0xd0 <__bad_interrupt>
  42:	00 00       	nop
  44:	45 c0       	rjmp	.+138    	; 0xd0 <__bad_interrupt>
  46:	00 00       	nop
  48:	43 c0       	rjmp	.+134    	; 0xd0 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	41 c0       	rjmp	.+130    	; 0xd0 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3f c0       	rjmp	.+126    	; 0xd0 <__bad_interrupt>
  52:	00 00       	nop
  54:	3d c0       	rjmp	.+122    	; 0xd0 <__bad_interrupt>
  56:	00 00       	nop
  58:	3b c0       	rjmp	.+118    	; 0xd0 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	39 c0       	rjmp	.+114    	; 0xd0 <__bad_interrupt>
  5e:	00 00       	nop
  60:	37 c0       	rjmp	.+110    	; 0xd0 <__bad_interrupt>
  62:	00 00       	nop
  64:	35 c0       	rjmp	.+106    	; 0xd0 <__bad_interrupt>
  66:	00 00       	nop
  68:	33 c0       	rjmp	.+102    	; 0xd0 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	31 c0       	rjmp	.+98     	; 0xd0 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2f c0       	rjmp	.+94     	; 0xd0 <__bad_interrupt>
  72:	00 00       	nop
  74:	2d c0       	rjmp	.+90     	; 0xd0 <__bad_interrupt>
  76:	00 00       	nop
  78:	2b c0       	rjmp	.+86     	; 0xd0 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	29 c0       	rjmp	.+82     	; 0xd0 <__bad_interrupt>
  7e:	00 00       	nop
  80:	27 c0       	rjmp	.+78     	; 0xd0 <__bad_interrupt>
  82:	00 00       	nop
  84:	25 c0       	rjmp	.+74     	; 0xd0 <__bad_interrupt>
  86:	00 00       	nop
  88:	23 c0       	rjmp	.+70     	; 0xd0 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	d9 00       	.word	0x00d9	; ????
  8e:	dd 00       	.word	0x00dd	; ????
  90:	e1 00       	.word	0x00e1	; ????
  92:	e5 00       	.word	0x00e5	; ????
  94:	e9 00       	.word	0x00e9	; ????
  96:	ed 00       	.word	0x00ed	; ????
  98:	f1 00       	.word	0x00f1	; ????
  9a:	f5 00       	.word	0x00f5	; ????
  9c:	f9 00       	.word	0x00f9	; ????
  9e:	06 01       	movw	r0, r12
  a0:	09 01       	movw	r0, r18
  a2:	0c 01       	movw	r0, r24
  a4:	0f 01       	movw	r0, r30
  a6:	12 01       	movw	r2, r4
  a8:	15 01       	movw	r2, r10
  aa:	18 01       	movw	r2, r16
  ac:	1b 01       	movw	r2, r22
  ae:	1e 01       	movw	r2, r28

000000b0 <__ctors_end>:
  b0:	11 24       	eor	r1, r1
  b2:	1f be       	out	0x3f, r1	; 63
  b4:	cf ef       	ldi	r28, 0xFF	; 255
  b6:	d0 e4       	ldi	r29, 0x40	; 64
  b8:	de bf       	out	0x3e, r29	; 62
  ba:	cd bf       	out	0x3d, r28	; 61

000000bc <__do_clear_bss>:
  bc:	21 e0       	ldi	r18, 0x01	; 1
  be:	a0 e0       	ldi	r26, 0x00	; 0
  c0:	b1 e0       	ldi	r27, 0x01	; 1
  c2:	01 c0       	rjmp	.+2      	; 0xc6 <.do_clear_bss_start>

000000c4 <.do_clear_bss_loop>:
  c4:	1d 92       	st	X+, r1

000000c6 <.do_clear_bss_start>:
  c6:	aa 30       	cpi	r26, 0x0A	; 10
  c8:	b2 07       	cpc	r27, r18
  ca:	e1 f7       	brne	.-8      	; 0xc4 <.do_clear_bss_loop>
  cc:	ba d0       	rcall	.+372    	; 0x242 <main>
  ce:	e1 c0       	rjmp	.+450    	; 0x292 <_exit>

000000d0 <__bad_interrupt>:
  d0:	97 cf       	rjmp	.-210    	; 0x0 <__vectors>

000000d2 <ADC_init>:
#include <avr/io.h>


void ADC_init(){
	ADCSRA |= (1 << ADEN) | (1 << ADSC) | (1 << ADATE);
  d2:	ea e7       	ldi	r30, 0x7A	; 122
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	80 6e       	ori	r24, 0xE0	; 224
  da:	80 83       	st	Z, r24
  dc:	08 95       	ret

000000de <Set_A2D_Pin>:
	// ADSC: Starts analog-to-digital conversion
	// ADATE: Enables auto-triggering, allowing for constant
	//	    analog to digital conversions.
}
void Set_A2D_Pin(unsigned char pinNum){
	ADMUX = (pinNum <= 0x07) ? pinNum : ADMUX;
  de:	88 30       	cpi	r24, 0x08	; 8
  e0:	60 f0       	brcs	.+24     	; 0xfa <Set_A2D_Pin+0x1c>
  e2:	ec e7       	ldi	r30, 0x7C	; 124
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	80 83       	st	Z, r24
  ea:	09 c0       	rjmp	.+18     	; 0xfe <Set_A2D_Pin+0x20>
	//Allow channel to stabilize
	static unsigned char i = 0;
	for(i = 0; i <15; i++) asm("nop");
  ec:	00 00       	nop
  ee:	81 50       	subi	r24, 0x01	; 1
  f0:	e9 f7       	brne	.-6      	; 0xec <Set_A2D_Pin+0xe>
  f2:	8f e0       	ldi	r24, 0x0F	; 15
  f4:	80 93 00 01 	sts	0x0100, r24
  f8:	08 95       	ret
	// ADSC: Starts analog-to-digital conversion
	// ADATE: Enables auto-triggering, allowing for constant
	//	    analog to digital conversions.
}
void Set_A2D_Pin(unsigned char pinNum){
	ADMUX = (pinNum <= 0x07) ? pinNum : ADMUX;
  fa:	80 93 7c 00 	sts	0x007C, r24
	// ADEN: Enables analog-to-digital conversion
	// ADSC: Starts analog-to-digital conversion
	// ADATE: Enables auto-triggering, allowing for constant
	//	    analog to digital conversions.
}
void Set_A2D_Pin(unsigned char pinNum){
  fe:	8f e0       	ldi	r24, 0x0F	; 15
 100:	f5 cf       	rjmp	.-22     	; 0xec <Set_A2D_Pin+0xe>

00000102 <takeInput>:
unsigned char tmpD;
unsigned short current_val; // stores current value read
unsigned short my_short; //stores the average light
unsigned char brightness; //should store a value from 0 - 20, 0 for off, 20 for brightest
void takeInput(){
	switch(adc_State){
 102:	80 91 09 01 	lds	r24, 0x0109
 106:	81 30       	cpi	r24, 0x01	; 1
 108:	61 f0       	breq	.+24     	; 0x122 <takeInput+0x20>
 10a:	18 f0       	brcs	.+6      	; 0x112 <takeInput+0x10>
 10c:	82 30       	cpi	r24, 0x02	; 2
 10e:	81 f0       	breq	.+32     	; 0x130 <takeInput+0x2e>
 110:	0c c0       	rjmp	.+24     	; 0x12a <takeInput+0x28>
		case adc_Start:
			adc_State = adc_Init;
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	80 93 09 01 	sts	0x0109, r24
			adc_State = adc_Start;
			break;
	}
	switch(adc_State){
		case adc_Init:
			tmpB = tmpD = 0;
 118:	10 92 03 01 	sts	0x0103, r1
 11c:	10 92 04 01 	sts	0x0104, r1
			break;
 120:	36 c0       	rjmp	.+108    	; 0x18e <takeInput+0x8c>
	switch(adc_State){
		case adc_Start:
			adc_State = adc_Init;
			break;
		case adc_Init:
			adc_State = adc_Wait;
 122:	82 e0       	ldi	r24, 0x02	; 2
 124:	80 93 09 01 	sts	0x0109, r24
 128:	03 c0       	rjmp	.+6      	; 0x130 <takeInput+0x2e>
			break;
		case adc_Wait:
			break;	
		default:
			adc_State = adc_Start;
 12a:	10 92 09 01 	sts	0x0109, r1
 12e:	2f c0       	rjmp	.+94     	; 0x18e <takeInput+0x8c>
	switch(adc_State){
		case adc_Init:
			tmpB = tmpD = 0;
			break;
		case adc_Wait:
			current_val = ADC;
 130:	80 91 78 00 	lds	r24, 0x0078
 134:	90 91 79 00 	lds	r25, 0x0079
 138:	90 93 02 01 	sts	0x0102, r25
 13c:	80 93 01 01 	sts	0x0101, r24
			my_short = ( my_short + current_val ) / 2;
 140:	40 91 05 01 	lds	r20, 0x0105
 144:	50 91 06 01 	lds	r21, 0x0106
 148:	84 0f       	add	r24, r20
 14a:	95 1f       	adc	r25, r21
 14c:	ac 01       	movw	r20, r24
 14e:	56 95       	lsr	r21
 150:	47 95       	ror	r20
 152:	50 93 06 01 	sts	0x0106, r21
 156:	40 93 05 01 	sts	0x0105, r20
			if(my_short == 0){
 15a:	41 15       	cp	r20, r1
 15c:	51 05       	cpc	r21, r1
 15e:	19 f4       	brne	.+6      	; 0x166 <takeInput+0x64>
				brightness = 0;
 160:	10 92 08 01 	sts	0x0108, r1
 164:	10 c0       	rjmp	.+32     	; 0x186 <takeInput+0x84>
			}
			else {
				brightness = (my_short + 50) / 51;
 166:	9a 01       	movw	r18, r20
 168:	2e 5c       	subi	r18, 0xCE	; 206
 16a:	3f 4f       	sbci	r19, 0xFF	; 255
 16c:	a1 ea       	ldi	r26, 0xA1	; 161
 16e:	b0 ea       	ldi	r27, 0xA0	; 160
 170:	81 d0       	rcall	.+258    	; 0x274 <__umulhisi3>
 172:	96 95       	lsr	r25
 174:	87 95       	ror	r24
 176:	92 95       	swap	r25
 178:	82 95       	swap	r24
 17a:	8f 70       	andi	r24, 0x0F	; 15
 17c:	89 27       	eor	r24, r25
 17e:	9f 70       	andi	r25, 0x0F	; 15
 180:	89 27       	eor	r24, r25
 182:	80 93 08 01 	sts	0x0108, r24
			}
			tmpB = (char)my_short; //display on portb
 186:	40 93 04 01 	sts	0x0104, r20
			tmpD = (char)(my_short >> 8); //display two bits on portd
 18a:	50 93 03 01 	sts	0x0103, r21
			break;
		default:
			break;
	}
	PORTB = tmpB;
 18e:	80 91 04 01 	lds	r24, 0x0104
 192:	85 b9       	out	0x05, r24	; 5
	PORTD = tmpD;
 194:	80 91 03 01 	lds	r24, 0x0103
 198:	8b b9       	out	0x0b, r24	; 11
 19a:	08 95       	ret

0000019c <cycleInputs>:
}

/* cycleInputs takes values from PA0 to PA7 one at a time.  */
enum cycle_States{cycle_init, cycle_zero, cycle_one, cycle_two, cycle_three, cycle_four, cycle_five, cycle_six, cycle_seven}cycle_State;
void cycleInputs(){
	switch(cycle_State){ //transitions
 19c:	20 91 07 01 	lds	r18, 0x0107
 1a0:	82 2f       	mov	r24, r18
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	89 30       	cpi	r24, 0x09	; 9
 1a6:	91 05       	cpc	r25, r1
 1a8:	40 f5       	brcc	.+80     	; 0x1fa <cycleInputs+0x5e>
 1aa:	fc 01       	movw	r30, r24
 1ac:	ea 5b       	subi	r30, 0xBA	; 186
 1ae:	ff 4f       	sbci	r31, 0xFF	; 255
 1b0:	5b c0       	rjmp	.+182    	; 0x268 <__tablejump2__>
		case cycle_init:
			cycle_State = cycle_zero;
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	80 93 07 01 	sts	0x0107, r24
			break;
 1b8:	2c c0       	rjmp	.+88     	; 0x212 <cycleInputs+0x76>
		case cycle_zero:
			cycle_State = cycle_one;
 1ba:	82 e0       	ldi	r24, 0x02	; 2
 1bc:	80 93 07 01 	sts	0x0107, r24
 1c0:	2b c0       	rjmp	.+86     	; 0x218 <cycleInputs+0x7c>
			break;
		case cycle_one:
			cycle_State = cycle_two;
 1c2:	83 e0       	ldi	r24, 0x03	; 3
 1c4:	80 93 07 01 	sts	0x0107, r24
 1c8:	2a c0       	rjmp	.+84     	; 0x21e <cycleInputs+0x82>
			break;
		case cycle_two:
			cycle_State = cycle_three;
 1ca:	84 e0       	ldi	r24, 0x04	; 4
 1cc:	80 93 07 01 	sts	0x0107, r24
 1d0:	29 c0       	rjmp	.+82     	; 0x224 <cycleInputs+0x88>
			break;
		case cycle_three:
			cycle_State = cycle_four;
 1d2:	85 e0       	ldi	r24, 0x05	; 5
 1d4:	80 93 07 01 	sts	0x0107, r24
 1d8:	28 c0       	rjmp	.+80     	; 0x22a <cycleInputs+0x8e>
			break;
		case cycle_four:
			cycle_State = cycle_five;
 1da:	86 e0       	ldi	r24, 0x06	; 6
 1dc:	80 93 07 01 	sts	0x0107, r24
 1e0:	27 c0       	rjmp	.+78     	; 0x230 <cycleInputs+0x94>
			break;
		case cycle_five:
			cycle_State = cycle_six;
 1e2:	87 e0       	ldi	r24, 0x07	; 7
 1e4:	80 93 07 01 	sts	0x0107, r24
 1e8:	26 c0       	rjmp	.+76     	; 0x236 <cycleInputs+0x9a>
			break;
		case cycle_six:
			cycle_State = cycle_seven;
 1ea:	88 e0       	ldi	r24, 0x08	; 8
 1ec:	80 93 07 01 	sts	0x0107, r24
 1f0:	25 c0       	rjmp	.+74     	; 0x23c <cycleInputs+0xa0>
			break;
		case cycle_seven:
			cycle_State = cycle_zero;
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	80 93 07 01 	sts	0x0107, r24
			break;
 1f8:	0c c0       	rjmp	.+24     	; 0x212 <cycleInputs+0x76>
		default:
			break;
	}	
	switch(cycle_State){ //actions
 1fa:	82 2f       	mov	r24, r18
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	89 30       	cpi	r24, 0x09	; 9
 200:	91 05       	cpc	r25, r1
 202:	f0 f4       	brcc	.+60     	; 0x240 <cycleInputs+0xa4>
 204:	fc 01       	movw	r30, r24
 206:	e1 5b       	subi	r30, 0xB1	; 177
 208:	ff 4f       	sbci	r31, 0xFF	; 255
 20a:	2e c0       	rjmp	.+92     	; 0x268 <__tablejump2__>
		case cycle_init:
			Set_A2D_Pin(0x00);
 20c:	80 e0       	ldi	r24, 0x00	; 0
 20e:	67 cf       	rjmp	.-306    	; 0xde <Set_A2D_Pin>
			break;
 210:	08 95       	ret
		case cycle_zero:
			Set_A2D_Pin(0x00);
 212:	80 e0       	ldi	r24, 0x00	; 0
 214:	64 cf       	rjmp	.-312    	; 0xde <Set_A2D_Pin>
			break;
 216:	08 95       	ret
		case cycle_one:
			Set_A2D_Pin(0x01);
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	61 cf       	rjmp	.-318    	; 0xde <Set_A2D_Pin>
			break;
 21c:	08 95       	ret
		case cycle_two:
			Set_A2D_Pin(0x02);
 21e:	82 e0       	ldi	r24, 0x02	; 2
 220:	5e cf       	rjmp	.-324    	; 0xde <Set_A2D_Pin>
			break;
 222:	08 95       	ret
		case cycle_three:
			Set_A2D_Pin(0x03);
 224:	83 e0       	ldi	r24, 0x03	; 3
 226:	5b cf       	rjmp	.-330    	; 0xde <Set_A2D_Pin>
			break;
 228:	08 95       	ret
		case cycle_four:
			Set_A2D_Pin(0x04);
 22a:	84 e0       	ldi	r24, 0x04	; 4
 22c:	58 cf       	rjmp	.-336    	; 0xde <Set_A2D_Pin>
			break;
 22e:	08 95       	ret
		case cycle_five:
			Set_A2D_Pin(0x05);
 230:	85 e0       	ldi	r24, 0x05	; 5
 232:	55 cf       	rjmp	.-342    	; 0xde <Set_A2D_Pin>
			break;
 234:	08 95       	ret
		case cycle_six:
			Set_A2D_Pin(0x06);
 236:	86 e0       	ldi	r24, 0x06	; 6
 238:	52 cf       	rjmp	.-348    	; 0xde <Set_A2D_Pin>
			break;
 23a:	08 95       	ret
		case cycle_seven:
			Set_A2D_Pin(0x07);
 23c:	87 e0       	ldi	r24, 0x07	; 7
 23e:	4f cf       	rjmp	.-354    	; 0xde <Set_A2D_Pin>
 240:	08 95       	ret

00000242 <main>:
	}
}

int main(void)
{
	DDRB = 0xFF; PORTB = 0x00;
 242:	8f ef       	ldi	r24, 0xFF	; 255
 244:	84 b9       	out	0x04, r24	; 4
 246:	15 b8       	out	0x05, r1	; 5
	DDRD = 0xFF; PORTD = 0x00;
 248:	8a b9       	out	0x0a, r24	; 10
 24a:	1b b8       	out	0x0b, r1	; 11
	DDRA = 0x00; PORTA = 0xFF;
 24c:	11 b8       	out	0x01, r1	; 1
 24e:	82 b9       	out	0x02, r24	; 2
	
	adc_State = adc_Start;
 250:	10 92 09 01 	sts	0x0109, r1
	cycle_State = cycle_init;
 254:	10 92 07 01 	sts	0x0107, r1
	tmpB = tmpD = 0;
 258:	10 92 03 01 	sts	0x0103, r1
 25c:	10 92 04 01 	sts	0x0104, r1
	ADC_init();
 260:	38 df       	rcall	.-400    	; 0xd2 <ADC_init>
	
	while(1)
	{
		takeInput();
 262:	4f df       	rcall	.-354    	; 0x102 <takeInput>
		cycleInputs();
 264:	9b df       	rcall	.-202    	; 0x19c <cycleInputs>
 266:	fd cf       	rjmp	.-6      	; 0x262 <main+0x20>

00000268 <__tablejump2__>:
 268:	ee 0f       	add	r30, r30
 26a:	ff 1f       	adc	r31, r31

0000026c <__tablejump__>:
 26c:	05 90       	lpm	r0, Z+
 26e:	f4 91       	lpm	r31, Z
 270:	e0 2d       	mov	r30, r0
 272:	09 94       	ijmp

00000274 <__umulhisi3>:
 274:	a2 9f       	mul	r26, r18
 276:	b0 01       	movw	r22, r0
 278:	b3 9f       	mul	r27, r19
 27a:	c0 01       	movw	r24, r0
 27c:	a3 9f       	mul	r26, r19
 27e:	70 0d       	add	r23, r0
 280:	81 1d       	adc	r24, r1
 282:	11 24       	eor	r1, r1
 284:	91 1d       	adc	r25, r1
 286:	b2 9f       	mul	r27, r18
 288:	70 0d       	add	r23, r0
 28a:	81 1d       	adc	r24, r1
 28c:	11 24       	eor	r1, r1
 28e:	91 1d       	adc	r25, r1
 290:	08 95       	ret

00000292 <_exit>:
 292:	f8 94       	cli

00000294 <__stop_program>:
 294:	ff cf       	rjmp	.-2      	; 0x294 <__stop_program>
