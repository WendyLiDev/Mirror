
Time.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  00000820  000008b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000820  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800122  00800122  000008d6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008d6  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  00000906  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005a5  00000000  00000000  000009a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000201  00000000  00000000  00000f4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008ee  00000000  00000000  0000114c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000158  00000000  00000000  00001a3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002eb  00000000  00000000  00001b94  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000277  00000000  00000000  00001e7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  000020f6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	ca c0       	rjmp	.+404    	; 0x1ca <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e2       	ldi	r30, 0x20	; 32
  a0:	f8 e0       	ldi	r31, 0x08	; 8
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 32       	cpi	r26, 0x22	; 34
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e2       	ldi	r26, 0x22	; 34
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ad 32       	cpi	r26, 0x2D	; 45
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	7f d3       	rcall	.+1790   	; 0x7c2 <main>
  c4:	ab c3       	rjmp	.+1878   	; 0x81c <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <delay_ms>:
	}
}
// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M) {
	_avr_timer_M = M;
	_avr_timer_cntcurr = _avr_timer_M;
  c8:	18 16       	cp	r1, r24
  ca:	19 06       	cpc	r1, r25
  cc:	9c f4       	brge	.+38     	; 0xf4 <delay_ms+0x2c>
  ce:	40 e0       	ldi	r20, 0x00	; 0
  d0:	50 e0       	ldi	r21, 0x00	; 0
  d2:	77 e0       	ldi	r23, 0x07	; 7
  d4:	63 e0       	ldi	r22, 0x03	; 3
  d6:	0b c0       	rjmp	.+22     	; 0xee <delay_ms+0x26>
  d8:	00 00       	nop
  da:	21 50       	subi	r18, 0x01	; 1
  dc:	31 09       	sbc	r19, r1
  de:	21 15       	cp	r18, r1
  e0:	31 05       	cpc	r19, r1
  e2:	d1 f7       	brne	.-12     	; 0xd8 <delay_ms+0x10>
  e4:	4f 5f       	subi	r20, 0xFF	; 255
  e6:	5f 4f       	sbci	r21, 0xFF	; 255
  e8:	48 17       	cp	r20, r24
  ea:	59 07       	cpc	r21, r25
  ec:	19 f0       	breq	.+6      	; 0xf4 <delay_ms+0x2c>
  ee:	27 2f       	mov	r18, r23
  f0:	36 2f       	mov	r19, r22
  f2:	f2 cf       	rjmp	.-28     	; 0xd8 <delay_ms+0x10>
  f4:	08 95       	ret

000000f6 <LCD_WriteCommand>:
  f6:	5e 98       	cbi	0x0b, 6	; 11
  f8:	88 b9       	out	0x08, r24	; 8
  fa:	5f 9a       	sbi	0x0b, 7	; 11
  fc:	00 00       	nop
  fe:	5f 98       	cbi	0x0b, 7	; 11
 100:	82 e0       	ldi	r24, 0x02	; 2
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	e1 cf       	rjmp	.-62     	; 0xc8 <delay_ms>
 106:	08 95       	ret

00000108 <LCD_ClearScreen>:
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	f5 cf       	rjmp	.-22     	; 0xf6 <LCD_WriteCommand>
 10c:	08 95       	ret

0000010e <LCD_init>:
 10e:	84 e6       	ldi	r24, 0x64	; 100
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	da df       	rcall	.-76     	; 0xc8 <delay_ms>
 114:	88 e3       	ldi	r24, 0x38	; 56
 116:	ef df       	rcall	.-34     	; 0xf6 <LCD_WriteCommand>
 118:	86 e0       	ldi	r24, 0x06	; 6
 11a:	ed df       	rcall	.-38     	; 0xf6 <LCD_WriteCommand>
 11c:	8f e0       	ldi	r24, 0x0F	; 15
 11e:	eb df       	rcall	.-42     	; 0xf6 <LCD_WriteCommand>
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	e9 df       	rcall	.-46     	; 0xf6 <LCD_WriteCommand>
 124:	8a e0       	ldi	r24, 0x0A	; 10
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	cf cf       	rjmp	.-98     	; 0xc8 <delay_ms>
 12a:	08 95       	ret

0000012c <LCD_WriteData>:
 12c:	5e 9a       	sbi	0x0b, 6	; 11
 12e:	88 b9       	out	0x08, r24	; 8
 130:	5f 9a       	sbi	0x0b, 7	; 11
 132:	00 00       	nop
 134:	5f 98       	cbi	0x0b, 7	; 11
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	c6 cf       	rjmp	.-116    	; 0xc8 <delay_ms>
 13c:	08 95       	ret

0000013e <LCD_Cursor>:
 13e:	81 31       	cpi	r24, 0x11	; 17
 140:	18 f4       	brcc	.+6      	; 0x148 <LCD_Cursor+0xa>
 142:	81 58       	subi	r24, 0x81	; 129
 144:	d8 cf       	rjmp	.-80     	; 0xf6 <LCD_WriteCommand>
 146:	08 95       	ret
 148:	81 55       	subi	r24, 0x51	; 81
 14a:	d5 cf       	rjmp	.-86     	; 0xf6 <LCD_WriteCommand>
 14c:	08 95       	ret

0000014e <LCD_DisplayString>:
 14e:	0f 93       	push	r16
 150:	1f 93       	push	r17
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
 156:	18 2f       	mov	r17, r24
 158:	eb 01       	movw	r28, r22
 15a:	d6 df       	rcall	.-84     	; 0x108 <LCD_ClearScreen>
 15c:	88 81       	ld	r24, Y
 15e:	88 23       	and	r24, r24
 160:	59 f0       	breq	.+22     	; 0x178 <LCD_DisplayString+0x2a>
 162:	01 e0       	ldi	r16, 0x01	; 1
 164:	01 0f       	add	r16, r17
 166:	81 2f       	mov	r24, r17
 168:	ea df       	rcall	.-44     	; 0x13e <LCD_Cursor>
 16a:	89 91       	ld	r24, Y+
 16c:	df df       	rcall	.-66     	; 0x12c <LCD_WriteData>
 16e:	88 81       	ld	r24, Y
 170:	88 23       	and	r24, r24
 172:	11 f0       	breq	.+4      	; 0x178 <LCD_DisplayString+0x2a>
 174:	10 2f       	mov	r17, r16
 176:	f5 cf       	rjmp	.-22     	; 0x162 <LCD_DisplayString+0x14>
 178:	df 91       	pop	r29
 17a:	cf 91       	pop	r28
 17c:	1f 91       	pop	r17
 17e:	0f 91       	pop	r16
 180:	08 95       	ret

00000182 <TimerOn>:
 182:	8b e0       	ldi	r24, 0x0B	; 11
 184:	80 93 81 00 	sts	0x0081, r24
 188:	8d e7       	ldi	r24, 0x7D	; 125
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	90 93 89 00 	sts	0x0089, r25
 190:	80 93 88 00 	sts	0x0088, r24
 194:	82 e0       	ldi	r24, 0x02	; 2
 196:	80 93 6f 00 	sts	0x006F, r24
 19a:	10 92 85 00 	sts	0x0085, r1
 19e:	10 92 84 00 	sts	0x0084, r1
 1a2:	80 91 02 01 	lds	r24, 0x0102
 1a6:	90 91 03 01 	lds	r25, 0x0103
 1aa:	a0 91 04 01 	lds	r26, 0x0104
 1ae:	b0 91 05 01 	lds	r27, 0x0105
 1b2:	80 93 22 01 	sts	0x0122, r24
 1b6:	90 93 23 01 	sts	0x0123, r25
 1ba:	a0 93 24 01 	sts	0x0124, r26
 1be:	b0 93 25 01 	sts	0x0125, r27
 1c2:	8f b7       	in	r24, 0x3f	; 63
 1c4:	80 68       	ori	r24, 0x80	; 128
 1c6:	8f bf       	out	0x3f, r24	; 63
 1c8:	08 95       	ret

000001ca <__vector_13>:
 1ca:	1f 92       	push	r1
 1cc:	0f 92       	push	r0
 1ce:	0f b6       	in	r0, 0x3f	; 63
 1d0:	0f 92       	push	r0
 1d2:	11 24       	eor	r1, r1
 1d4:	8f 93       	push	r24
 1d6:	9f 93       	push	r25
 1d8:	af 93       	push	r26
 1da:	bf 93       	push	r27
 1dc:	80 91 22 01 	lds	r24, 0x0122
 1e0:	90 91 23 01 	lds	r25, 0x0123
 1e4:	a0 91 24 01 	lds	r26, 0x0124
 1e8:	b0 91 25 01 	lds	r27, 0x0125
 1ec:	01 97       	sbiw	r24, 0x01	; 1
 1ee:	a1 09       	sbc	r26, r1
 1f0:	b1 09       	sbc	r27, r1
 1f2:	80 93 22 01 	sts	0x0122, r24
 1f6:	90 93 23 01 	sts	0x0123, r25
 1fa:	a0 93 24 01 	sts	0x0124, r26
 1fe:	b0 93 25 01 	sts	0x0125, r27
 202:	89 2b       	or	r24, r25
 204:	8a 2b       	or	r24, r26
 206:	8b 2b       	or	r24, r27
 208:	99 f4       	brne	.+38     	; 0x230 <__vector_13+0x66>
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	80 93 26 01 	sts	0x0126, r24
 210:	80 91 02 01 	lds	r24, 0x0102
 214:	90 91 03 01 	lds	r25, 0x0103
 218:	a0 91 04 01 	lds	r26, 0x0104
 21c:	b0 91 05 01 	lds	r27, 0x0105
 220:	80 93 22 01 	sts	0x0122, r24
 224:	90 93 23 01 	sts	0x0123, r25
 228:	a0 93 24 01 	sts	0x0124, r26
 22c:	b0 93 25 01 	sts	0x0125, r27
 230:	bf 91       	pop	r27
 232:	af 91       	pop	r26
 234:	9f 91       	pop	r25
 236:	8f 91       	pop	r24
 238:	0f 90       	pop	r0
 23a:	0f be       	out	0x3f, r0	; 63
 23c:	0f 90       	pop	r0
 23e:	1f 90       	pop	r1
 240:	18 95       	reti

00000242 <tick>:
unsigned char minutes;
unsigned char hours;
/*Handles ticking the clock once every second and increments minutes after 60 seconds*/
enum tick_States{tick_init, tick_tick, tick_reset}tick_State;
void tick(){ 
	switch(tick_State){
 242:	80 91 2a 01 	lds	r24, 0x012A
 246:	81 30       	cpi	r24, 0x01	; 1
 248:	41 f0       	breq	.+16     	; 0x25a <tick+0x18>
 24a:	18 f0       	brcs	.+6      	; 0x252 <tick+0x10>
 24c:	82 30       	cpi	r24, 0x02	; 2
 24e:	69 f0       	breq	.+26     	; 0x26a <tick+0x28>
 250:	10 c0       	rjmp	.+32     	; 0x272 <tick+0x30>
		case tick_init:
			tick_State = tick_tick;
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	80 93 2a 01 	sts	0x012A, r24
			break;
 258:	15 c0       	rjmp	.+42     	; 0x284 <tick+0x42>
		case tick_tick:
			if(seconds < 59){
 25a:	80 91 29 01 	lds	r24, 0x0129
 25e:	8b 33       	cpi	r24, 0x3B	; 59
 260:	88 f0       	brcs	.+34     	; 0x284 <tick+0x42>
				tick_State = tick_tick;
			}
			else if(seconds >= 59){
				tick_State = tick_reset;
 262:	82 e0       	ldi	r24, 0x02	; 2
 264:	80 93 2a 01 	sts	0x012A, r24
 268:	13 c0       	rjmp	.+38     	; 0x290 <tick+0x4e>
			}
			break;
		case tick_reset:
			tick_State = tick_tick;
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	80 93 2a 01 	sts	0x012A, r24
			break;
 270:	09 c0       	rjmp	.+18     	; 0x284 <tick+0x42>
		default:
			break;
	}
	switch(tick_State){
 272:	81 30       	cpi	r24, 0x01	; 1
 274:	39 f0       	breq	.+14     	; 0x284 <tick+0x42>
 276:	18 f0       	brcs	.+6      	; 0x27e <tick+0x3c>
 278:	82 30       	cpi	r24, 0x02	; 2
 27a:	89 f4       	brne	.+34     	; 0x29e <tick+0x5c>
 27c:	09 c0       	rjmp	.+18     	; 0x290 <tick+0x4e>
		case tick_init:
			seconds = 0;
 27e:	10 92 29 01 	sts	0x0129, r1
			break;
 282:	08 95       	ret
		case tick_tick:
			seconds++;
 284:	80 91 29 01 	lds	r24, 0x0129
 288:	8f 5f       	subi	r24, 0xFF	; 255
 28a:	80 93 29 01 	sts	0x0129, r24
			break;
 28e:	08 95       	ret
		case tick_reset:
			minutes++;
 290:	80 91 2b 01 	lds	r24, 0x012B
 294:	8f 5f       	subi	r24, 0xFF	; 255
 296:	80 93 2b 01 	sts	0x012B, r24
			seconds = 0;
 29a:	10 92 29 01 	sts	0x0129, r1
 29e:	08 95       	ret

000002a0 <calculateTime>:
}
/*Calculates the time using the tickFSM and uses B1 to increment minutes , b2 to increment hours*/
enum time_States{time_init, time_wait, time_minute, time_hour}time_State;
char* timeStr = "  :             Good Night!";
void calculateTime(){
	switch(time_State){
 2a0:	80 91 27 01 	lds	r24, 0x0127
 2a4:	81 30       	cpi	r24, 0x01	; 1
 2a6:	51 f0       	breq	.+20     	; 0x2bc <calculateTime+0x1c>
 2a8:	28 f0       	brcs	.+10     	; 0x2b4 <calculateTime+0x14>
 2aa:	82 30       	cpi	r24, 0x02	; 2
 2ac:	19 f1       	breq	.+70     	; 0x2f4 <calculateTime+0x54>
 2ae:	83 30       	cpi	r24, 0x03	; 3
 2b0:	29 f1       	breq	.+74     	; 0x2fc <calculateTime+0x5c>
 2b2:	28 c0       	rjmp	.+80     	; 0x304 <calculateTime+0x64>
		case time_init:
			time_State = time_wait;
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	80 93 27 01 	sts	0x0127, r24
			break;
 2ba:	4b c0       	rjmp	.+150    	; 0x352 <calculateTime+0xb2>
		case time_wait:
			if(GetBit(PINB, 1)){
 2bc:	19 9b       	sbis	0x03, 1	; 3
 2be:	08 c0       	rjmp	.+16     	; 0x2d0 <calculateTime+0x30>
				time_State = time_minute;
 2c0:	82 e0       	ldi	r24, 0x02	; 2
 2c2:	80 93 27 01 	sts	0x0127, r24
				hours = 0;
				minutes = 0;
			}
			break;
		case time_minute: //handles the case when user inputs time change
			if(minutes == 59){
 2c6:	80 91 2b 01 	lds	r24, 0x012B
 2ca:	8b 33       	cpi	r24, 0x3B	; 59
 2cc:	b9 f5       	brne	.+110    	; 0x33c <calculateTime+0x9c>
 2ce:	2e c0       	rjmp	.+92     	; 0x32c <calculateTime+0x8c>
			break;
		case time_wait:
			if(GetBit(PINB, 1)){
				time_State = time_minute;
			}
			else if(GetBit(PINB, 2)){
 2d0:	1a 9b       	sbis	0x03, 2	; 3
 2d2:	08 c0       	rjmp	.+16     	; 0x2e4 <calculateTime+0x44>
				time_State = time_hour;
 2d4:	83 e0       	ldi	r24, 0x03	; 3
 2d6:	80 93 27 01 	sts	0x0127, r24
			else{
				minutes ++;
			}
			break;
		case time_hour: //handles the case when user inputs time change
			if(hours == 23){
 2da:	80 91 2c 01 	lds	r24, 0x012C
 2de:	87 31       	cpi	r24, 0x17	; 23
 2e0:	a1 f5       	brne	.+104    	; 0x34a <calculateTime+0xaa>
 2e2:	30 c0       	rjmp	.+96     	; 0x344 <calculateTime+0xa4>
				time_State = time_minute;
			}
			else if(GetBit(PINB, 2)){
				time_State = time_hour;
			}
			else if( (!GetBit(PINB, 1) || !GetBit(PINB, 2)) || (GetBit(PINB, 1) && GetBit(PINB, 2))){
 2e4:	19 9b       	sbis	0x03, 1	; 3
 2e6:	35 c0       	rjmp	.+106    	; 0x352 <calculateTime+0xb2>
 2e8:	1a 9b       	sbis	0x03, 2	; 3
 2ea:	33 c0       	rjmp	.+102    	; 0x352 <calculateTime+0xb2>
 2ec:	19 9b       	sbis	0x03, 1	; 3
 2ee:	31 c0       	rjmp	.+98     	; 0x352 <calculateTime+0xb2>
 2f0:	83 b1       	in	r24, 0x03	; 3
 2f2:	2f c0       	rjmp	.+94     	; 0x352 <calculateTime+0xb2>
				time_State = time_wait;
			}
			break;
		case time_minute:
			time_State = time_wait;
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	80 93 27 01 	sts	0x0127, r24
			break;
 2fa:	2b c0       	rjmp	.+86     	; 0x352 <calculateTime+0xb2>
		case time_hour:
			time_State = time_wait;
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	80 93 27 01 	sts	0x0127, r24
			break;
 302:	27 c0       	rjmp	.+78     	; 0x352 <calculateTime+0xb2>
		default:
			time_State = time_init;
 304:	10 92 27 01 	sts	0x0127, r1
			break;
	}
	switch(time_State){
		case time_init:
			minutes = 0;
 308:	10 92 2b 01 	sts	0x012B, r1
			hours = 0;
 30c:	10 92 2c 01 	sts	0x012C, r1
			break;
 310:	08 95       	ret
		case time_wait:
			//updates time based on tick function
			if((minutes == 59) && (seconds ==59)){ 
 312:	80 91 29 01 	lds	r24, 0x0129
 316:	8b 33       	cpi	r24, 0x3B	; 59
 318:	01 f5       	brne	.+64     	; 0x35a <calculateTime+0xba>
				hours ++;
 31a:	80 91 2c 01 	lds	r24, 0x012C
 31e:	8f 5f       	subi	r24, 0xFF	; 255
 320:	80 93 2c 01 	sts	0x012C, r24
				minutes ++;
 324:	8c e3       	ldi	r24, 0x3C	; 60
 326:	80 93 2b 01 	sts	0x012B, r24
 32a:	08 95       	ret
				minutes = 0;
			}
			break;
		case time_minute: //handles the case when user inputs time change
			if(minutes == 59){
				minutes = 0;
 32c:	10 92 2b 01 	sts	0x012B, r1
				hours ++;
 330:	80 91 2c 01 	lds	r24, 0x012C
 334:	8f 5f       	subi	r24, 0xFF	; 255
 336:	80 93 2c 01 	sts	0x012C, r24
 33a:	08 95       	ret
			}
			else{
				minutes ++;
 33c:	8f 5f       	subi	r24, 0xFF	; 255
 33e:	80 93 2b 01 	sts	0x012B, r24
 342:	08 95       	ret
			}
			break;
		case time_hour: //handles the case when user inputs time change
			if(hours == 23){
				hours = 0;
 344:	10 92 2c 01 	sts	0x012C, r1
 348:	08 95       	ret
			}
			else{
				hours++;
 34a:	8f 5f       	subi	r24, 0xFF	; 255
 34c:	80 93 2c 01 	sts	0x012C, r24
 350:	08 95       	ret
			minutes = 0;
			hours = 0;
			break;
		case time_wait:
			//updates time based on tick function
			if((minutes == 59) && (seconds ==59)){ 
 352:	80 91 2b 01 	lds	r24, 0x012B
 356:	8b 33       	cpi	r24, 0x3B	; 59
 358:	e1 f2       	breq	.-72     	; 0x312 <calculateTime+0x72>
 35a:	08 95       	ret

0000035c <displayTime>:
	}
	};
/*Displays the time based on variables "hours" and "minutes" as "hours":"minutes"*/
enum disp_States{display_init, update}display_State;
void displayTime(){
	switch(display_State){
 35c:	80 91 28 01 	lds	r24, 0x0128
 360:	81 30       	cpi	r24, 0x01	; 1
 362:	09 f0       	breq	.+2      	; 0x366 <displayTime+0xa>
 364:	26 c2       	rjmp	.+1100   	; 0x7b2 <displayTime+0x456>
		case display_init:
		break;
		case update:
			//updates bit 0 of the time
			if(minutes > 58){ //only check when it is reaching the top of the hour
 366:	80 91 2b 01 	lds	r24, 0x012B
 36a:	8b 33       	cpi	r24, 0x3B	; 59
 36c:	08 f4       	brcc	.+2      	; 0x370 <displayTime+0x14>
 36e:	d3 c0       	rjmp	.+422    	; 0x516 <displayTime+0x1ba>
				if((hours / 10) == 0){timeStr[0] = '0';}
 370:	80 91 2c 01 	lds	r24, 0x012C
 374:	8a 30       	cpi	r24, 0x0A	; 10
 376:	38 f4       	brcc	.+14     	; 0x386 <displayTime+0x2a>
 378:	e0 91 00 01 	lds	r30, 0x0100
 37c:	f0 91 01 01 	lds	r31, 0x0101
 380:	80 e3       	ldi	r24, 0x30	; 48
 382:	80 83       	st	Z, r24
 384:	61 c0       	rjmp	.+194    	; 0x448 <displayTime+0xec>
				else if((hours / 10) == 1){timeStr[0] = '1';}
 386:	96 ef       	ldi	r25, 0xF6	; 246
 388:	98 0f       	add	r25, r24
 38a:	9a 30       	cpi	r25, 0x0A	; 10
 38c:	38 f4       	brcc	.+14     	; 0x39c <displayTime+0x40>
 38e:	e0 91 00 01 	lds	r30, 0x0100
 392:	f0 91 01 01 	lds	r31, 0x0101
 396:	81 e3       	ldi	r24, 0x31	; 49
 398:	80 83       	st	Z, r24
 39a:	56 c0       	rjmp	.+172    	; 0x448 <displayTime+0xec>
				else if((hours / 10) == 2){timeStr[0] = '2';}
 39c:	9c ee       	ldi	r25, 0xEC	; 236
 39e:	98 0f       	add	r25, r24
 3a0:	9a 30       	cpi	r25, 0x0A	; 10
 3a2:	38 f4       	brcc	.+14     	; 0x3b2 <displayTime+0x56>
 3a4:	e0 91 00 01 	lds	r30, 0x0100
 3a8:	f0 91 01 01 	lds	r31, 0x0101
 3ac:	82 e3       	ldi	r24, 0x32	; 50
 3ae:	80 83       	st	Z, r24
 3b0:	4b c0       	rjmp	.+150    	; 0x448 <displayTime+0xec>
				else if((hours / 10) == 3){timeStr[0] = '3';}
 3b2:	92 ee       	ldi	r25, 0xE2	; 226
 3b4:	98 0f       	add	r25, r24
 3b6:	9a 30       	cpi	r25, 0x0A	; 10
 3b8:	38 f4       	brcc	.+14     	; 0x3c8 <displayTime+0x6c>
 3ba:	e0 91 00 01 	lds	r30, 0x0100
 3be:	f0 91 01 01 	lds	r31, 0x0101
 3c2:	83 e3       	ldi	r24, 0x33	; 51
 3c4:	80 83       	st	Z, r24
 3c6:	40 c0       	rjmp	.+128    	; 0x448 <displayTime+0xec>
				else if((hours / 10) == 4){timeStr[0] = '4';}
 3c8:	98 ed       	ldi	r25, 0xD8	; 216
 3ca:	98 0f       	add	r25, r24
 3cc:	9a 30       	cpi	r25, 0x0A	; 10
 3ce:	38 f4       	brcc	.+14     	; 0x3de <displayTime+0x82>
 3d0:	e0 91 00 01 	lds	r30, 0x0100
 3d4:	f0 91 01 01 	lds	r31, 0x0101
 3d8:	84 e3       	ldi	r24, 0x34	; 52
 3da:	80 83       	st	Z, r24
 3dc:	35 c0       	rjmp	.+106    	; 0x448 <displayTime+0xec>
				else if((hours / 10) == 5){timeStr[0] = '5';}
 3de:	9e ec       	ldi	r25, 0xCE	; 206
 3e0:	98 0f       	add	r25, r24
 3e2:	9a 30       	cpi	r25, 0x0A	; 10
 3e4:	38 f4       	brcc	.+14     	; 0x3f4 <displayTime+0x98>
 3e6:	e0 91 00 01 	lds	r30, 0x0100
 3ea:	f0 91 01 01 	lds	r31, 0x0101
 3ee:	85 e3       	ldi	r24, 0x35	; 53
 3f0:	80 83       	st	Z, r24
 3f2:	2a c0       	rjmp	.+84     	; 0x448 <displayTime+0xec>
				else if((hours / 10) == 6){timeStr[0] = '6';}
 3f4:	94 ec       	ldi	r25, 0xC4	; 196
 3f6:	98 0f       	add	r25, r24
 3f8:	9a 30       	cpi	r25, 0x0A	; 10
 3fa:	38 f4       	brcc	.+14     	; 0x40a <displayTime+0xae>
 3fc:	e0 91 00 01 	lds	r30, 0x0100
 400:	f0 91 01 01 	lds	r31, 0x0101
 404:	86 e3       	ldi	r24, 0x36	; 54
 406:	80 83       	st	Z, r24
 408:	1f c0       	rjmp	.+62     	; 0x448 <displayTime+0xec>
				else if((hours / 10) == 7){timeStr[0] = '7';}
 40a:	9a eb       	ldi	r25, 0xBA	; 186
 40c:	98 0f       	add	r25, r24
 40e:	9a 30       	cpi	r25, 0x0A	; 10
 410:	38 f4       	brcc	.+14     	; 0x420 <displayTime+0xc4>
 412:	e0 91 00 01 	lds	r30, 0x0100
 416:	f0 91 01 01 	lds	r31, 0x0101
 41a:	87 e3       	ldi	r24, 0x37	; 55
 41c:	80 83       	st	Z, r24
 41e:	14 c0       	rjmp	.+40     	; 0x448 <displayTime+0xec>
				else if((hours / 10) == 8){timeStr[0] = '8';}
 420:	90 eb       	ldi	r25, 0xB0	; 176
 422:	98 0f       	add	r25, r24
 424:	9a 30       	cpi	r25, 0x0A	; 10
 426:	38 f4       	brcc	.+14     	; 0x436 <displayTime+0xda>
 428:	e0 91 00 01 	lds	r30, 0x0100
 42c:	f0 91 01 01 	lds	r31, 0x0101
 430:	88 e3       	ldi	r24, 0x38	; 56
 432:	80 83       	st	Z, r24
 434:	09 c0       	rjmp	.+18     	; 0x448 <displayTime+0xec>
				else if((hours / 10) == 9){timeStr[0] = '9';}
 436:	8a 55       	subi	r24, 0x5A	; 90
 438:	8a 30       	cpi	r24, 0x0A	; 10
 43a:	30 f4       	brcc	.+12     	; 0x448 <displayTime+0xec>
 43c:	e0 91 00 01 	lds	r30, 0x0100
 440:	f0 91 01 01 	lds	r31, 0x0101
 444:	89 e3       	ldi	r24, 0x39	; 57
 446:	80 83       	st	Z, r24
				//updates bit 1 of the time
				if((hours % 10) == 0){timeStr[1] = '0';}
 448:	90 91 2c 01 	lds	r25, 0x012C
 44c:	8d ec       	ldi	r24, 0xCD	; 205
 44e:	98 9f       	mul	r25, r24
 450:	81 2d       	mov	r24, r1
 452:	11 24       	eor	r1, r1
 454:	86 95       	lsr	r24
 456:	86 95       	lsr	r24
 458:	86 95       	lsr	r24
 45a:	88 0f       	add	r24, r24
 45c:	28 2f       	mov	r18, r24
 45e:	22 0f       	add	r18, r18
 460:	22 0f       	add	r18, r18
 462:	82 0f       	add	r24, r18
 464:	98 1b       	sub	r25, r24
 466:	39 f4       	brne	.+14     	; 0x476 <displayTime+0x11a>
 468:	e0 91 00 01 	lds	r30, 0x0100
 46c:	f0 91 01 01 	lds	r31, 0x0101
 470:	80 e3       	ldi	r24, 0x30	; 48
 472:	81 83       	std	Z+1, r24	; 0x01
 474:	50 c0       	rjmp	.+160    	; 0x516 <displayTime+0x1ba>
				else if((hours % 10) == 1){timeStr[1] = '1';}
 476:	91 30       	cpi	r25, 0x01	; 1
 478:	39 f4       	brne	.+14     	; 0x488 <displayTime+0x12c>
 47a:	e0 91 00 01 	lds	r30, 0x0100
 47e:	f0 91 01 01 	lds	r31, 0x0101
 482:	81 e3       	ldi	r24, 0x31	; 49
 484:	81 83       	std	Z+1, r24	; 0x01
 486:	47 c0       	rjmp	.+142    	; 0x516 <displayTime+0x1ba>
				else if((hours % 10) == 2){timeStr[1] = '2';}
 488:	92 30       	cpi	r25, 0x02	; 2
 48a:	39 f4       	brne	.+14     	; 0x49a <displayTime+0x13e>
 48c:	e0 91 00 01 	lds	r30, 0x0100
 490:	f0 91 01 01 	lds	r31, 0x0101
 494:	82 e3       	ldi	r24, 0x32	; 50
 496:	81 83       	std	Z+1, r24	; 0x01
 498:	3e c0       	rjmp	.+124    	; 0x516 <displayTime+0x1ba>
				else if((hours % 10) == 3){timeStr[1] = '3';}
 49a:	93 30       	cpi	r25, 0x03	; 3
 49c:	39 f4       	brne	.+14     	; 0x4ac <displayTime+0x150>
 49e:	e0 91 00 01 	lds	r30, 0x0100
 4a2:	f0 91 01 01 	lds	r31, 0x0101
 4a6:	83 e3       	ldi	r24, 0x33	; 51
 4a8:	81 83       	std	Z+1, r24	; 0x01
 4aa:	35 c0       	rjmp	.+106    	; 0x516 <displayTime+0x1ba>
				else if((hours % 10) == 4){timeStr[1] = '4';}
 4ac:	94 30       	cpi	r25, 0x04	; 4
 4ae:	39 f4       	brne	.+14     	; 0x4be <displayTime+0x162>
 4b0:	e0 91 00 01 	lds	r30, 0x0100
 4b4:	f0 91 01 01 	lds	r31, 0x0101
 4b8:	84 e3       	ldi	r24, 0x34	; 52
 4ba:	81 83       	std	Z+1, r24	; 0x01
 4bc:	2c c0       	rjmp	.+88     	; 0x516 <displayTime+0x1ba>
				else if((hours % 10) == 5){timeStr[1] = '5';}
 4be:	95 30       	cpi	r25, 0x05	; 5
 4c0:	39 f4       	brne	.+14     	; 0x4d0 <displayTime+0x174>
 4c2:	e0 91 00 01 	lds	r30, 0x0100
 4c6:	f0 91 01 01 	lds	r31, 0x0101
 4ca:	85 e3       	ldi	r24, 0x35	; 53
 4cc:	81 83       	std	Z+1, r24	; 0x01
 4ce:	23 c0       	rjmp	.+70     	; 0x516 <displayTime+0x1ba>
				else if((hours % 10) == 6){timeStr[1] = '6';}
 4d0:	96 30       	cpi	r25, 0x06	; 6
 4d2:	39 f4       	brne	.+14     	; 0x4e2 <displayTime+0x186>
 4d4:	e0 91 00 01 	lds	r30, 0x0100
 4d8:	f0 91 01 01 	lds	r31, 0x0101
 4dc:	86 e3       	ldi	r24, 0x36	; 54
 4de:	81 83       	std	Z+1, r24	; 0x01
 4e0:	1a c0       	rjmp	.+52     	; 0x516 <displayTime+0x1ba>
				else if((hours % 10) == 7){timeStr[1] = '7';}
 4e2:	97 30       	cpi	r25, 0x07	; 7
 4e4:	39 f4       	brne	.+14     	; 0x4f4 <displayTime+0x198>
 4e6:	e0 91 00 01 	lds	r30, 0x0100
 4ea:	f0 91 01 01 	lds	r31, 0x0101
 4ee:	87 e3       	ldi	r24, 0x37	; 55
 4f0:	81 83       	std	Z+1, r24	; 0x01
 4f2:	11 c0       	rjmp	.+34     	; 0x516 <displayTime+0x1ba>
				else if((hours % 10) == 8){timeStr[1] = '8';}
 4f4:	98 30       	cpi	r25, 0x08	; 8
 4f6:	39 f4       	brne	.+14     	; 0x506 <displayTime+0x1aa>
 4f8:	e0 91 00 01 	lds	r30, 0x0100
 4fc:	f0 91 01 01 	lds	r31, 0x0101
 500:	88 e3       	ldi	r24, 0x38	; 56
 502:	81 83       	std	Z+1, r24	; 0x01
 504:	08 c0       	rjmp	.+16     	; 0x516 <displayTime+0x1ba>
				else if((hours % 10) == 9){timeStr[1] = '9';}
 506:	99 30       	cpi	r25, 0x09	; 9
 508:	31 f4       	brne	.+12     	; 0x516 <displayTime+0x1ba>
 50a:	e0 91 00 01 	lds	r30, 0x0100
 50e:	f0 91 01 01 	lds	r31, 0x0101
 512:	89 e3       	ldi	r24, 0x39	; 57
 514:	81 83       	std	Z+1, r24	; 0x01
			}
				//updates bit 3 of the time
			if(seconds > 58){ //only check when it is reaching the top of the minute
 516:	80 91 29 01 	lds	r24, 0x0129
 51a:	8b 33       	cpi	r24, 0x3B	; 59
 51c:	08 f4       	brcc	.+2      	; 0x520 <displayTime+0x1c4>
 51e:	d2 c0       	rjmp	.+420    	; 0x6c4 <displayTime+0x368>
				if((minutes / 10) == 0){timeStr[3] = '0';}
 520:	90 91 2b 01 	lds	r25, 0x012B
 524:	9a 30       	cpi	r25, 0x0A	; 10
 526:	38 f4       	brcc	.+14     	; 0x536 <displayTime+0x1da>
 528:	e0 91 00 01 	lds	r30, 0x0100
 52c:	f0 91 01 01 	lds	r31, 0x0101
 530:	80 e3       	ldi	r24, 0x30	; 48
 532:	83 83       	std	Z+3, r24	; 0x03
 534:	62 c0       	rjmp	.+196    	; 0x5fa <displayTime+0x29e>
				else if((minutes / 10) == 1){timeStr[3] = '1';}
 536:	86 ef       	ldi	r24, 0xF6	; 246
 538:	89 0f       	add	r24, r25
 53a:	8a 30       	cpi	r24, 0x0A	; 10
 53c:	38 f4       	brcc	.+14     	; 0x54c <displayTime+0x1f0>
 53e:	e0 91 00 01 	lds	r30, 0x0100
 542:	f0 91 01 01 	lds	r31, 0x0101
 546:	81 e3       	ldi	r24, 0x31	; 49
 548:	83 83       	std	Z+3, r24	; 0x03
 54a:	57 c0       	rjmp	.+174    	; 0x5fa <displayTime+0x29e>
				else if((minutes / 10) == 2){timeStr[3] = '2';}
 54c:	8c ee       	ldi	r24, 0xEC	; 236
 54e:	89 0f       	add	r24, r25
 550:	8a 30       	cpi	r24, 0x0A	; 10
 552:	38 f4       	brcc	.+14     	; 0x562 <displayTime+0x206>
 554:	e0 91 00 01 	lds	r30, 0x0100
 558:	f0 91 01 01 	lds	r31, 0x0101
 55c:	82 e3       	ldi	r24, 0x32	; 50
 55e:	83 83       	std	Z+3, r24	; 0x03
 560:	4c c0       	rjmp	.+152    	; 0x5fa <displayTime+0x29e>
				else if((minutes / 10) == 3){timeStr[3] = '3';}
 562:	82 ee       	ldi	r24, 0xE2	; 226
 564:	89 0f       	add	r24, r25
 566:	8a 30       	cpi	r24, 0x0A	; 10
 568:	38 f4       	brcc	.+14     	; 0x578 <displayTime+0x21c>
 56a:	e0 91 00 01 	lds	r30, 0x0100
 56e:	f0 91 01 01 	lds	r31, 0x0101
 572:	83 e3       	ldi	r24, 0x33	; 51
 574:	83 83       	std	Z+3, r24	; 0x03
 576:	41 c0       	rjmp	.+130    	; 0x5fa <displayTime+0x29e>
				else if((minutes / 10) == 4){timeStr[3] = '4';}
 578:	88 ed       	ldi	r24, 0xD8	; 216
 57a:	89 0f       	add	r24, r25
 57c:	8a 30       	cpi	r24, 0x0A	; 10
 57e:	38 f4       	brcc	.+14     	; 0x58e <displayTime+0x232>
 580:	e0 91 00 01 	lds	r30, 0x0100
 584:	f0 91 01 01 	lds	r31, 0x0101
 588:	84 e3       	ldi	r24, 0x34	; 52
 58a:	83 83       	std	Z+3, r24	; 0x03
 58c:	36 c0       	rjmp	.+108    	; 0x5fa <displayTime+0x29e>
				else if((minutes / 10) == 5){timeStr[3] = '5';}
 58e:	8e ec       	ldi	r24, 0xCE	; 206
 590:	89 0f       	add	r24, r25
 592:	8a 30       	cpi	r24, 0x0A	; 10
 594:	38 f4       	brcc	.+14     	; 0x5a4 <displayTime+0x248>
 596:	e0 91 00 01 	lds	r30, 0x0100
 59a:	f0 91 01 01 	lds	r31, 0x0101
 59e:	85 e3       	ldi	r24, 0x35	; 53
 5a0:	83 83       	std	Z+3, r24	; 0x03
 5a2:	2b c0       	rjmp	.+86     	; 0x5fa <displayTime+0x29e>
				else if((minutes / 10) == 6){timeStr[3] = '6';}
 5a4:	84 ec       	ldi	r24, 0xC4	; 196
 5a6:	89 0f       	add	r24, r25
 5a8:	8a 30       	cpi	r24, 0x0A	; 10
 5aa:	38 f4       	brcc	.+14     	; 0x5ba <displayTime+0x25e>
 5ac:	e0 91 00 01 	lds	r30, 0x0100
 5b0:	f0 91 01 01 	lds	r31, 0x0101
 5b4:	86 e3       	ldi	r24, 0x36	; 54
 5b6:	83 83       	std	Z+3, r24	; 0x03
 5b8:	20 c0       	rjmp	.+64     	; 0x5fa <displayTime+0x29e>
				else if((minutes / 10) == 7){timeStr[3] = '7';}
 5ba:	8a eb       	ldi	r24, 0xBA	; 186
 5bc:	89 0f       	add	r24, r25
 5be:	8a 30       	cpi	r24, 0x0A	; 10
 5c0:	38 f4       	brcc	.+14     	; 0x5d0 <displayTime+0x274>
 5c2:	e0 91 00 01 	lds	r30, 0x0100
 5c6:	f0 91 01 01 	lds	r31, 0x0101
 5ca:	87 e3       	ldi	r24, 0x37	; 55
 5cc:	83 83       	std	Z+3, r24	; 0x03
 5ce:	15 c0       	rjmp	.+42     	; 0x5fa <displayTime+0x29e>
				else if((minutes / 10) == 8){timeStr[3] = '8';}
 5d0:	80 eb       	ldi	r24, 0xB0	; 176
 5d2:	89 0f       	add	r24, r25
 5d4:	8a 30       	cpi	r24, 0x0A	; 10
 5d6:	38 f4       	brcc	.+14     	; 0x5e6 <displayTime+0x28a>
 5d8:	e0 91 00 01 	lds	r30, 0x0100
 5dc:	f0 91 01 01 	lds	r31, 0x0101
 5e0:	88 e3       	ldi	r24, 0x38	; 56
 5e2:	83 83       	std	Z+3, r24	; 0x03
 5e4:	0a c0       	rjmp	.+20     	; 0x5fa <displayTime+0x29e>
				else if((minutes / 10) == 9){timeStr[3] = '9';}
 5e6:	86 ea       	ldi	r24, 0xA6	; 166
 5e8:	89 0f       	add	r24, r25
 5ea:	8a 30       	cpi	r24, 0x0A	; 10
 5ec:	30 f4       	brcc	.+12     	; 0x5fa <displayTime+0x29e>
 5ee:	e0 91 00 01 	lds	r30, 0x0100
 5f2:	f0 91 01 01 	lds	r31, 0x0101
 5f6:	89 e3       	ldi	r24, 0x39	; 57
 5f8:	83 83       	std	Z+3, r24	; 0x03
				//updates bit 4 of the time
				if((minutes % 10) == 0){timeStr[4] = '0';}
 5fa:	8d ec       	ldi	r24, 0xCD	; 205
 5fc:	98 9f       	mul	r25, r24
 5fe:	81 2d       	mov	r24, r1
 600:	11 24       	eor	r1, r1
 602:	86 95       	lsr	r24
 604:	86 95       	lsr	r24
 606:	86 95       	lsr	r24
 608:	88 0f       	add	r24, r24
 60a:	28 2f       	mov	r18, r24
 60c:	22 0f       	add	r18, r18
 60e:	22 0f       	add	r18, r18
 610:	82 0f       	add	r24, r18
 612:	98 1b       	sub	r25, r24
 614:	39 f4       	brne	.+14     	; 0x624 <displayTime+0x2c8>
 616:	e0 91 00 01 	lds	r30, 0x0100
 61a:	f0 91 01 01 	lds	r31, 0x0101
 61e:	80 e3       	ldi	r24, 0x30	; 48
 620:	84 83       	std	Z+4, r24	; 0x04
 622:	50 c0       	rjmp	.+160    	; 0x6c4 <displayTime+0x368>
				else if((minutes % 10) == 1){timeStr[4] = '1';}
 624:	91 30       	cpi	r25, 0x01	; 1
 626:	39 f4       	brne	.+14     	; 0x636 <displayTime+0x2da>
 628:	e0 91 00 01 	lds	r30, 0x0100
 62c:	f0 91 01 01 	lds	r31, 0x0101
 630:	81 e3       	ldi	r24, 0x31	; 49
 632:	84 83       	std	Z+4, r24	; 0x04
 634:	47 c0       	rjmp	.+142    	; 0x6c4 <displayTime+0x368>
				else if((minutes % 10) == 2){timeStr[4] = '2';}
 636:	92 30       	cpi	r25, 0x02	; 2
 638:	39 f4       	brne	.+14     	; 0x648 <displayTime+0x2ec>
 63a:	e0 91 00 01 	lds	r30, 0x0100
 63e:	f0 91 01 01 	lds	r31, 0x0101
 642:	82 e3       	ldi	r24, 0x32	; 50
 644:	84 83       	std	Z+4, r24	; 0x04
 646:	3e c0       	rjmp	.+124    	; 0x6c4 <displayTime+0x368>
				else if((minutes % 10) == 3){timeStr[4] = '3';}
 648:	93 30       	cpi	r25, 0x03	; 3
 64a:	39 f4       	brne	.+14     	; 0x65a <displayTime+0x2fe>
 64c:	e0 91 00 01 	lds	r30, 0x0100
 650:	f0 91 01 01 	lds	r31, 0x0101
 654:	83 e3       	ldi	r24, 0x33	; 51
 656:	84 83       	std	Z+4, r24	; 0x04
 658:	35 c0       	rjmp	.+106    	; 0x6c4 <displayTime+0x368>
				else if((minutes % 10) == 4){timeStr[4] = '4';}
 65a:	94 30       	cpi	r25, 0x04	; 4
 65c:	39 f4       	brne	.+14     	; 0x66c <displayTime+0x310>
 65e:	e0 91 00 01 	lds	r30, 0x0100
 662:	f0 91 01 01 	lds	r31, 0x0101
 666:	84 e3       	ldi	r24, 0x34	; 52
 668:	84 83       	std	Z+4, r24	; 0x04
 66a:	2c c0       	rjmp	.+88     	; 0x6c4 <displayTime+0x368>
				else if((minutes % 10) == 5){timeStr[4] = '5';}
 66c:	95 30       	cpi	r25, 0x05	; 5
 66e:	39 f4       	brne	.+14     	; 0x67e <displayTime+0x322>
 670:	e0 91 00 01 	lds	r30, 0x0100
 674:	f0 91 01 01 	lds	r31, 0x0101
 678:	85 e3       	ldi	r24, 0x35	; 53
 67a:	84 83       	std	Z+4, r24	; 0x04
 67c:	23 c0       	rjmp	.+70     	; 0x6c4 <displayTime+0x368>
				else if((minutes % 10) == 6){timeStr[4] = '6';}
 67e:	96 30       	cpi	r25, 0x06	; 6
 680:	39 f4       	brne	.+14     	; 0x690 <displayTime+0x334>
 682:	e0 91 00 01 	lds	r30, 0x0100
 686:	f0 91 01 01 	lds	r31, 0x0101
 68a:	86 e3       	ldi	r24, 0x36	; 54
 68c:	84 83       	std	Z+4, r24	; 0x04
 68e:	1a c0       	rjmp	.+52     	; 0x6c4 <displayTime+0x368>
				else if((minutes % 10) == 7){timeStr[4] = '7';}
 690:	97 30       	cpi	r25, 0x07	; 7
 692:	39 f4       	brne	.+14     	; 0x6a2 <displayTime+0x346>
 694:	e0 91 00 01 	lds	r30, 0x0100
 698:	f0 91 01 01 	lds	r31, 0x0101
 69c:	87 e3       	ldi	r24, 0x37	; 55
 69e:	84 83       	std	Z+4, r24	; 0x04
 6a0:	11 c0       	rjmp	.+34     	; 0x6c4 <displayTime+0x368>
				else if((minutes % 10) == 8){timeStr[4] = '8';}
 6a2:	98 30       	cpi	r25, 0x08	; 8
 6a4:	39 f4       	brne	.+14     	; 0x6b4 <displayTime+0x358>
 6a6:	e0 91 00 01 	lds	r30, 0x0100
 6aa:	f0 91 01 01 	lds	r31, 0x0101
 6ae:	88 e3       	ldi	r24, 0x38	; 56
 6b0:	84 83       	std	Z+4, r24	; 0x04
 6b2:	08 c0       	rjmp	.+16     	; 0x6c4 <displayTime+0x368>
				else if((minutes % 10) == 9){timeStr[4] = '9';}
 6b4:	99 30       	cpi	r25, 0x09	; 9
 6b6:	31 f4       	brne	.+12     	; 0x6c4 <displayTime+0x368>
 6b8:	e0 91 00 01 	lds	r30, 0x0100
 6bc:	f0 91 01 01 	lds	r31, 0x0101
 6c0:	89 e3       	ldi	r24, 0x39	; 57
 6c2:	84 83       	std	Z+4, r24	; 0x04
			}
			//updates the greeting
			if(minutes > 58){ //only check when it is reaching the top of the hour
 6c4:	80 91 2b 01 	lds	r24, 0x012B
 6c8:	8b 33       	cpi	r24, 0x3B	; 59
 6ca:	08 f4       	brcc	.+2      	; 0x6ce <displayTime+0x372>
 6cc:	6c c0       	rjmp	.+216    	; 0x7a6 <displayTime+0x44a>
				if(hours == 6){
 6ce:	80 91 2c 01 	lds	r24, 0x012C
 6d2:	86 30       	cpi	r24, 0x06	; 6
 6d4:	c9 f4       	brne	.+50     	; 0x708 <displayTime+0x3ac>
					//Good morning!
					timeStr[21] = 'm';
 6d6:	e0 91 00 01 	lds	r30, 0x0100
 6da:	f0 91 01 01 	lds	r31, 0x0101
 6de:	8d e6       	ldi	r24, 0x6D	; 109
 6e0:	85 8b       	std	Z+21, r24	; 0x15
					timeStr[22] = 'o';
 6e2:	8f e6       	ldi	r24, 0x6F	; 111
 6e4:	86 8b       	std	Z+22, r24	; 0x16
					timeStr[23] = 'r';
 6e6:	82 e7       	ldi	r24, 0x72	; 114
 6e8:	87 8b       	std	Z+23, r24	; 0x17
					timeStr[24] = 'n';
 6ea:	8e e6       	ldi	r24, 0x6E	; 110
 6ec:	80 8f       	std	Z+24, r24	; 0x18
					timeStr[25] = 'i';
 6ee:	99 e6       	ldi	r25, 0x69	; 105
 6f0:	91 8f       	std	Z+25, r25	; 0x19
					timeStr[26] = 'n';
 6f2:	82 8f       	std	Z+26, r24	; 0x1a
					timeStr[27] = 'g';
 6f4:	87 e6       	ldi	r24, 0x67	; 103
 6f6:	83 8f       	std	Z+27, r24	; 0x1b
					timeStr[28] = '!';
 6f8:	81 e2       	ldi	r24, 0x21	; 33
 6fa:	84 8f       	std	Z+28, r24	; 0x1c
					timeStr[29] = ' ';
 6fc:	80 e2       	ldi	r24, 0x20	; 32
 6fe:	85 8f       	std	Z+29, r24	; 0x1d
					timeStr[30] = ' ';
 700:	86 8f       	std	Z+30, r24	; 0x1e
					timeStr[31] = ' ';
 702:	87 8f       	std	Z+31, r24	; 0x1f
					timeStr[32] = ' ';
 704:	80 a3       	std	Z+32, r24	; 0x20
 706:	4f c0       	rjmp	.+158    	; 0x7a6 <displayTime+0x44a>
				}
				else if(hours == 12){
 708:	8c 30       	cpi	r24, 0x0C	; 12
 70a:	d1 f4       	brne	.+52     	; 0x740 <displayTime+0x3e4>
					//Good afternoon! 
					timeStr[21] = 'a';
 70c:	e0 91 00 01 	lds	r30, 0x0100
 710:	f0 91 01 01 	lds	r31, 0x0101
 714:	81 e6       	ldi	r24, 0x61	; 97
 716:	85 8b       	std	Z+21, r24	; 0x15
					timeStr[22] = 'f';
 718:	86 e6       	ldi	r24, 0x66	; 102
 71a:	86 8b       	std	Z+22, r24	; 0x16
					timeStr[23] = 't';
 71c:	84 e7       	ldi	r24, 0x74	; 116
 71e:	87 8b       	std	Z+23, r24	; 0x17
					timeStr[24] = 'e';
 720:	85 e6       	ldi	r24, 0x65	; 101
 722:	80 8f       	std	Z+24, r24	; 0x18
					timeStr[25] = 'r';
 724:	82 e7       	ldi	r24, 0x72	; 114
 726:	81 8f       	std	Z+25, r24	; 0x19
					timeStr[26] = 'n';
 728:	8e e6       	ldi	r24, 0x6E	; 110
 72a:	82 8f       	std	Z+26, r24	; 0x1a
					timeStr[27] = 'o';
 72c:	9f e6       	ldi	r25, 0x6F	; 111
 72e:	93 8f       	std	Z+27, r25	; 0x1b
					timeStr[28] = 'o';
 730:	94 8f       	std	Z+28, r25	; 0x1c
					timeStr[29] = 'n';
 732:	85 8f       	std	Z+29, r24	; 0x1d
					timeStr[30] = '!';
 734:	81 e2       	ldi	r24, 0x21	; 33
 736:	86 8f       	std	Z+30, r24	; 0x1e
					timeStr[31] = ' ';
 738:	80 e2       	ldi	r24, 0x20	; 32
 73a:	87 8f       	std	Z+31, r24	; 0x1f
					timeStr[32] = ' ';
 73c:	80 a3       	std	Z+32, r24	; 0x20
 73e:	33 c0       	rjmp	.+102    	; 0x7a6 <displayTime+0x44a>
				}
				else if(hours == 18){
 740:	82 31       	cpi	r24, 0x12	; 18
 742:	c1 f4       	brne	.+48     	; 0x774 <displayTime+0x418>
					//Good evening!
					timeStr[21] = 'e';
 744:	e0 91 00 01 	lds	r30, 0x0100
 748:	f0 91 01 01 	lds	r31, 0x0101
 74c:	85 e6       	ldi	r24, 0x65	; 101
 74e:	85 8b       	std	Z+21, r24	; 0x15
					timeStr[22] = 'v';
 750:	96 e7       	ldi	r25, 0x76	; 118
 752:	96 8b       	std	Z+22, r25	; 0x16
					timeStr[23] = 'e';
 754:	87 8b       	std	Z+23, r24	; 0x17
					timeStr[24] = 'n';
 756:	8e e6       	ldi	r24, 0x6E	; 110
 758:	80 8f       	std	Z+24, r24	; 0x18
					timeStr[25] = 'i';
 75a:	99 e6       	ldi	r25, 0x69	; 105
 75c:	91 8f       	std	Z+25, r25	; 0x19
					timeStr[26] = 'n';
 75e:	82 8f       	std	Z+26, r24	; 0x1a
					timeStr[27] = 'g';
 760:	87 e6       	ldi	r24, 0x67	; 103
 762:	83 8f       	std	Z+27, r24	; 0x1b
					timeStr[28] = '!';
 764:	81 e2       	ldi	r24, 0x21	; 33
 766:	84 8f       	std	Z+28, r24	; 0x1c
					timeStr[29] = ' ';
 768:	80 e2       	ldi	r24, 0x20	; 32
 76a:	85 8f       	std	Z+29, r24	; 0x1d
					timeStr[30] = ' ';
 76c:	86 8f       	std	Z+30, r24	; 0x1e
					timeStr[31] = ' ';
 76e:	87 8f       	std	Z+31, r24	; 0x1f
					timeStr[32] = ' ';
 770:	80 a3       	std	Z+32, r24	; 0x20
 772:	19 c0       	rjmp	.+50     	; 0x7a6 <displayTime+0x44a>
				}
				else if(hours == 22){
 774:	86 31       	cpi	r24, 0x16	; 22
 776:	b9 f4       	brne	.+46     	; 0x7a6 <displayTime+0x44a>
					//Good Night!
					timeStr[21] = 'n';
 778:	e0 91 00 01 	lds	r30, 0x0100
 77c:	f0 91 01 01 	lds	r31, 0x0101
 780:	8e e6       	ldi	r24, 0x6E	; 110
 782:	85 8b       	std	Z+21, r24	; 0x15
					timeStr[22] = 'i';
 784:	89 e6       	ldi	r24, 0x69	; 105
 786:	86 8b       	std	Z+22, r24	; 0x16
					timeStr[23] = 'g';
 788:	87 e6       	ldi	r24, 0x67	; 103
 78a:	87 8b       	std	Z+23, r24	; 0x17
					timeStr[24] = 'h';
 78c:	88 e6       	ldi	r24, 0x68	; 104
 78e:	80 8f       	std	Z+24, r24	; 0x18
					timeStr[25] = 't';
 790:	84 e7       	ldi	r24, 0x74	; 116
 792:	81 8f       	std	Z+25, r24	; 0x19
					timeStr[26] = '!';
 794:	81 e2       	ldi	r24, 0x21	; 33
 796:	82 8f       	std	Z+26, r24	; 0x1a
					timeStr[27] = ' ';
 798:	80 e2       	ldi	r24, 0x20	; 32
 79a:	83 8f       	std	Z+27, r24	; 0x1b
					timeStr[28] = ' ';
 79c:	84 8f       	std	Z+28, r24	; 0x1c
					timeStr[29] = ' ';
 79e:	85 8f       	std	Z+29, r24	; 0x1d
					timeStr[30] = ' ';
 7a0:	86 8f       	std	Z+30, r24	; 0x1e
					timeStr[31] = ' ';
 7a2:	87 8f       	std	Z+31, r24	; 0x1f
					timeStr[32] = ' ';
 7a4:	80 a3       	std	Z+32, r24	; 0x20
				}
			}
			LCD_DisplayString(1, timeStr);
 7a6:	60 91 00 01 	lds	r22, 0x0100
 7aa:	70 91 01 01 	lds	r23, 0x0101
 7ae:	81 e0       	ldi	r24, 0x01	; 1
 7b0:	ce dc       	rcall	.-1636   	; 0x14e <LCD_DisplayString>
			break;
		default:
			break;
	}
	switch(display_State){
 7b2:	80 91 28 01 	lds	r24, 0x0128
 7b6:	81 11       	cpse	r24, r1
 7b8:	03 c0       	rjmp	.+6      	; 0x7c0 <displayTime+0x464>
		case display_init:
			display_State = update;
 7ba:	81 e0       	ldi	r24, 0x01	; 1
 7bc:	80 93 28 01 	sts	0x0128, r24
 7c0:	08 95       	ret

000007c2 <main>:
		_avr_timer_cntcurr = _avr_timer_M;
	}
}
// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M) {
	_avr_timer_M = M;
 7c2:	88 ee       	ldi	r24, 0xE8	; 232
 7c4:	93 e0       	ldi	r25, 0x03	; 3
 7c6:	a0 e0       	ldi	r26, 0x00	; 0
 7c8:	b0 e0       	ldi	r27, 0x00	; 0
 7ca:	80 93 02 01 	sts	0x0102, r24
 7ce:	90 93 03 01 	sts	0x0103, r25
 7d2:	a0 93 04 01 	sts	0x0104, r26
 7d6:	b0 93 05 01 	sts	0x0105, r27
	_avr_timer_cntcurr = _avr_timer_M;
 7da:	80 93 22 01 	sts	0x0122, r24
 7de:	90 93 23 01 	sts	0x0123, r25
 7e2:	a0 93 24 01 	sts	0x0124, r26
 7e6:	b0 93 25 01 	sts	0x0125, r27
	}
}
int main(void)
{
    TimerSet(1000);
    TimerOn();
 7ea:	cb dc       	rcall	.-1642   	; 0x182 <TimerOn>
    DDRB = 0x00; PORTB = 0xFF;
 7ec:	14 b8       	out	0x04, r1	; 4
 7ee:	8f ef       	ldi	r24, 0xFF	; 255
 7f0:	85 b9       	out	0x05, r24	; 5
	DDRC = 0xFF; PORTC = 0x00;
 7f2:	87 b9       	out	0x07, r24	; 7
 7f4:	18 b8       	out	0x08, r1	; 8
	DDRD = 0xFF; PORTD = 0x00;
 7f6:	8a b9       	out	0x0a, r24	; 10
 7f8:	1b b8       	out	0x0b, r1	; 11
	tick_State = tick_init;
 7fa:	10 92 2a 01 	sts	0x012A, r1
	time_State = time_init;
 7fe:	10 92 27 01 	sts	0x0127, r1
	display_State = display_init;
 802:	10 92 28 01 	sts	0x0128, r1
	LCD_init();
 806:	83 dc       	rcall	.-1786   	; 0x10e <LCD_init>
	//LCD_DisplayString( 1, "Hello World!");
	
    while (1)
    {
		tick();
 808:	1c dd       	rcall	.-1480   	; 0x242 <tick>
		calculateTime();
 80a:	4a dd       	rcall	.-1388   	; 0x2a0 <calculateTime>
		displayTime();
 80c:	a7 dd       	rcall	.-1202   	; 0x35c <displayTime>
	    while (!TimerFlag);  // Wait for timer period
 80e:	80 91 26 01 	lds	r24, 0x0126
 812:	88 23       	and	r24, r24
 814:	e1 f3       	breq	.-8      	; 0x80e <main+0x4c>
	    TimerFlag = 0;
 816:	10 92 26 01 	sts	0x0126, r1


    }
 81a:	f6 cf       	rjmp	.-20     	; 0x808 <main+0x46>

0000081c <_exit>:
 81c:	f8 94       	cli

0000081e <__stop_program>:
 81e:	ff cf       	rjmp	.-2      	; 0x81e <__stop_program>
